// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CarbonRetired extends ethereum.Event {
  get params(): CarbonRetired__Params {
    return new CarbonRetired__Params(this);
  }
}

export class CarbonRetired__Params {
  _event: CarbonRetired;

  constructor(event: CarbonRetired) {
    this._event = event;
  }

  get carbonBridge(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get retiringAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get retiringEntityString(): string {
    return this._event.parameters[2].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._event.parameters[4].value.toString();
  }

  get retirementMessage(): string {
    return this._event.parameters[5].value.toString();
  }

  get carbonPool(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get carbonToken(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get retiredAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class DiamondCut extends ethereum.Event {
  get params(): DiamondCut__Params {
    return new DiamondCut__Params(this);
  }
}

export class DiamondCut__Params {
  _event: DiamondCut;

  constructor(event: DiamondCut) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InternalBalanceChanged extends ethereum.Event {
  get params(): InternalBalanceChanged__Params {
    return new InternalBalanceChanged__Params(this);
  }
}

export class InternalBalanceChanged__Params {
  _event: InternalBalanceChanged;

  constructor(event: InternalBalanceChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get delta(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class KlimaInfinity__c3_redeemPoolDefaultResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class KlimaInfinity__toucan_redeemPoolDefaultResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class KlimaInfinity__facetsResultFacets_Struct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get functionSelectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class KlimaInfinity__getRetirementDetailsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: string;
  value4: string;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: string,
    value4: string,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class KlimaInfinity__getAllBalanceResultBStruct extends ethereum.Tuple {
  get internalBalance(): BigInt {
    return this[0].toBigInt();
  }

  get externalBalance(): BigInt {
    return this[1].toBigInt();
  }

  get totalBalance(): BigInt {
    return this[2].toBigInt();
  }
}

export class KlimaInfinity__getAllBalancesResultBalancesStruct extends ethereum.Tuple {
  get internalBalance(): BigInt {
    return this[0].toBigInt();
  }

  get externalBalance(): BigInt {
    return this[1].toBigInt();
  }

  get totalBalance(): BigInt {
    return this[2].toBigInt();
  }
}

export class KlimaInfinity extends ethereum.SmartContract {
  static bind(address: Address): KlimaInfinity {
    return new KlimaInfinity("KlimaInfinity", address);
  }

  c3_redeemPoolDefault(
    poolToken: Address,
    amount: BigInt,
    fromMode: i32,
    toMode: i32
  ): KlimaInfinity__c3_redeemPoolDefaultResult {
    let result = super.call(
      "c3_redeemPoolDefault",
      "c3_redeemPoolDefault(address,uint256,uint8,uint8):(address[],uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );

    return new KlimaInfinity__c3_redeemPoolDefaultResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_c3_redeemPoolDefault(
    poolToken: Address,
    amount: BigInt,
    fromMode: i32,
    toMode: i32
  ): ethereum.CallResult<KlimaInfinity__c3_redeemPoolDefaultResult> {
    let result = super.tryCall(
      "c3_redeemPoolDefault",
      "c3_redeemPoolDefault(address,uint256,uint8,uint8):(address[],uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaInfinity__c3_redeemPoolDefaultResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  c3_redeemPoolSpecific(
    poolToken: Address,
    projectTokens: Array<Address>,
    amounts: Array<BigInt>,
    fromMode: i32,
    toMode: i32
  ): Array<BigInt> {
    let result = super.call(
      "c3_redeemPoolSpecific",
      "c3_redeemPoolSpecific(address,address[],uint256[],uint8,uint8):(uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromAddressArray(projectTokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );

    return result[0].toBigIntArray();
  }

  try_c3_redeemPoolSpecific(
    poolToken: Address,
    projectTokens: Array<Address>,
    amounts: Array<BigInt>,
    fromMode: i32,
    toMode: i32
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "c3_redeemPoolSpecific",
      "c3_redeemPoolSpecific(address,address[],uint256[],uint8,uint8):(uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromAddressArray(projectTokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  c3_retireExactC3T(
    carbonToken: Address,
    amount: BigInt,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): BigInt {
    let result = super.call(
      "c3_retireExactC3T",
      "c3_retireExactC3T(address,uint256,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );

    return result[0].toBigInt();
  }

  try_c3_retireExactC3T(
    carbonToken: Address,
    amount: BigInt,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "c3_retireExactC3T",
      "c3_retireExactC3T(address,uint256,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  c3_retireExactC3TWithEntity(
    carbonToken: Address,
    amount: BigInt,
    retiringEntityString: string,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): BigInt {
    let result = super.call(
      "c3_retireExactC3TWithEntity",
      "c3_retireExactC3TWithEntity(address,uint256,string,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(retiringEntityString),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );

    return result[0].toBigInt();
  }

  try_c3_retireExactC3TWithEntity(
    carbonToken: Address,
    amount: BigInt,
    retiringEntityString: string,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "c3_retireExactC3TWithEntity",
      "c3_retireExactC3TWithEntity(address,uint256,string,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(retiringEntityString),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toucan_redeemPoolDefault(
    poolToken: Address,
    amount: BigInt,
    fromMode: i32,
    toMode: i32
  ): KlimaInfinity__toucan_redeemPoolDefaultResult {
    let result = super.call(
      "toucan_redeemPoolDefault",
      "toucan_redeemPoolDefault(address,uint256,uint8,uint8):(address[],uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );

    return new KlimaInfinity__toucan_redeemPoolDefaultResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_toucan_redeemPoolDefault(
    poolToken: Address,
    amount: BigInt,
    fromMode: i32,
    toMode: i32
  ): ethereum.CallResult<KlimaInfinity__toucan_redeemPoolDefaultResult> {
    let result = super.tryCall(
      "toucan_redeemPoolDefault",
      "toucan_redeemPoolDefault(address,uint256,uint8,uint8):(address[],uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaInfinity__toucan_redeemPoolDefaultResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  toucan_redeemPoolSpecific(
    poolToken: Address,
    projectTokens: Array<Address>,
    amounts: Array<BigInt>,
    fromMode: i32,
    toMode: i32
  ): Array<BigInt> {
    let result = super.call(
      "toucan_redeemPoolSpecific",
      "toucan_redeemPoolSpecific(address,address[],uint256[],uint8,uint8):(uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromAddressArray(projectTokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );

    return result[0].toBigIntArray();
  }

  try_toucan_redeemPoolSpecific(
    poolToken: Address,
    projectTokens: Array<Address>,
    amounts: Array<BigInt>,
    fromMode: i32,
    toMode: i32
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "toucan_redeemPoolSpecific",
      "toucan_redeemPoolSpecific(address,address[],uint256[],uint8,uint8):(uint256[])",
      [
        ethereum.Value.fromAddress(poolToken),
        ethereum.Value.fromAddressArray(projectTokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(toMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  toucan_retireExactTCO2(
    carbonToken: Address,
    amount: BigInt,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): BigInt {
    let result = super.call(
      "toucan_retireExactTCO2",
      "toucan_retireExactTCO2(address,uint256,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );

    return result[0].toBigInt();
  }

  try_toucan_retireExactTCO2(
    carbonToken: Address,
    amount: BigInt,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toucan_retireExactTCO2",
      "toucan_retireExactTCO2(address,uint256,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toucan_retireExactTCO2WithEntity(
    carbonToken: Address,
    amount: BigInt,
    retiringEntityString: string,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): BigInt {
    let result = super.call(
      "toucan_retireExactTCO2WithEntity",
      "toucan_retireExactTCO2WithEntity(address,uint256,string,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(retiringEntityString),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );

    return result[0].toBigInt();
  }

  try_toucan_retireExactTCO2WithEntity(
    carbonToken: Address,
    amount: BigInt,
    retiringEntityString: string,
    beneficiaryAddress: Address,
    beneficiaryString: string,
    retirementMessage: string,
    fromMode: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toucan_retireExactTCO2WithEntity",
      "toucan_retireExactTCO2WithEntity(address,uint256,string,address,string,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(carbonToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(retiringEntityString),
        ethereum.Value.fromAddress(beneficiaryAddress),
        ethereum.Value.fromString(beneficiaryString),
        ethereum.Value.fromString(retirementMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fromMode))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  facetAddress(_functionSelector: Bytes): Address {
    let result = super.call("facetAddress", "facetAddress(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(_functionSelector)
    ]);

    return result[0].toAddress();
  }

  try_facetAddress(_functionSelector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "facetAddress",
      "facetAddress(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_functionSelector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  facetAddresses(): Array<Address> {
    let result = super.call(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_facetAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  facetFunctionSelectors(_facet: Address): Array<Bytes> {
    let result = super.call(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );

    return result[0].toBytesArray();
  }

  try_facetFunctionSelectors(
    _facet: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  facets(): Array<KlimaInfinity__facetsResultFacets_Struct> {
    let result = super.call("facets", "facets():((address,bytes4[])[])", []);

    return result[0].toTupleArray<KlimaInfinity__facetsResultFacets_Struct>();
  }

  try_facets(): ethereum.CallResult<
    Array<KlimaInfinity__facetsResultFacets_Struct>
  > {
    let result = super.tryCall("facets", "facets():((address,bytes4[])[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<KlimaInfinity__facetsResultFacets_Struct>()
    );
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRetirementDetails(
    account: Address,
    retirementIndex: BigInt
  ): KlimaInfinity__getRetirementDetailsResult {
    let result = super.call(
      "getRetirementDetails",
      "getRetirementDetails(address,uint256):(address,address,address,string,string,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(retirementIndex)
      ]
    );

    return new KlimaInfinity__getRetirementDetailsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt()
    );
  }

  try_getRetirementDetails(
    account: Address,
    retirementIndex: BigInt
  ): ethereum.CallResult<KlimaInfinity__getRetirementDetailsResult> {
    let result = super.tryCall(
      "getRetirementDetails",
      "getRetirementDetails(address,uint256):(address,address,address,string,string,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(retirementIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaInfinity__getRetirementDetailsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt()
      )
    );
  }

  getTotalCarbonRetired(account: Address): BigInt {
    let result = super.call(
      "getTotalCarbonRetired",
      "getTotalCarbonRetired(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getTotalCarbonRetired(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCarbonRetired",
      "getTotalCarbonRetired(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPoolRetired(account: Address, poolToken: Address): BigInt {
    let result = super.call(
      "getTotalPoolRetired",
      "getTotalPoolRetired(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(poolToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalPoolRetired(
    account: Address,
    poolToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPoolRetired",
      "getTotalPoolRetired(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(poolToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalProjectRetired(account: Address, projectToken: Address): BigInt {
    let result = super.call(
      "getTotalProjectRetired",
      "getTotalProjectRetired(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalProjectRetired(
    account: Address,
    projectToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalProjectRetired",
      "getTotalProjectRetired(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalRetirements(account: Address): BigInt {
    let result = super.call(
      "getTotalRetirements",
      "getTotalRetirements(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getTotalRetirements(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRetirements",
      "getTotalRetirements(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalRewardsClaimed(account: Address): BigInt {
    let result = super.call(
      "getTotalRewardsClaimed",
      "getTotalRewardsClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getTotalRewardsClaimed(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRewardsClaimed",
      "getTotalRewardsClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllBalance(
    account: Address,
    token: Address
  ): KlimaInfinity__getAllBalanceResultBStruct {
    let result = super.call(
      "getAllBalance",
      "getAllBalance(address,address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return changetype<KlimaInfinity__getAllBalanceResultBStruct>(
      result[0].toTuple()
    );
  }

  try_getAllBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<KlimaInfinity__getAllBalanceResultBStruct> {
    let result = super.tryCall(
      "getAllBalance",
      "getAllBalance(address,address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<KlimaInfinity__getAllBalanceResultBStruct>(value[0].toTuple())
    );
  }

  getAllBalances(
    account: Address,
    tokens: Array<Address>
  ): Array<KlimaInfinity__getAllBalancesResultBalancesStruct> {
    let result = super.call(
      "getAllBalances",
      "getAllBalances(address,address[]):((uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toTupleArray<
      KlimaInfinity__getAllBalancesResultBalancesStruct
    >();
  }

  try_getAllBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<
    Array<KlimaInfinity__getAllBalancesResultBalancesStruct>
  > {
    let result = super.tryCall(
      "getAllBalances",
      "getAllBalances(address,address[]):((uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<KlimaInfinity__getAllBalancesResultBalancesStruct>()
    );
  }

  getBalance(account: Address, token: Address): BigInt {
    let result = super.call(
      "getBalance",
      "getBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalance",
      "getBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalances(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getBalances",
      "getBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBalances",
      "getBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getExternalBalance(account: Address, token: Address): BigInt {
    let result = super.call(
      "getExternalBalance",
      "getExternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getExternalBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExternalBalance",
      "getExternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExternalBalances(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getExternalBalances",
      "getExternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getExternalBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExternalBalances",
      "getExternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getInternalBalance(account: Address, token: Address): BigInt {
    let result = super.call(
      "getInternalBalance",
      "getInternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getInternalBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInternalBalance",
      "getInternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInternalBalances(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getInternalBalances",
      "getInternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getInternalBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getInternalBalances",
      "getInternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class C3_redeemPoolDefaultCall extends ethereum.Call {
  get inputs(): C3_redeemPoolDefaultCall__Inputs {
    return new C3_redeemPoolDefaultCall__Inputs(this);
  }

  get outputs(): C3_redeemPoolDefaultCall__Outputs {
    return new C3_redeemPoolDefaultCall__Outputs(this);
  }
}

export class C3_redeemPoolDefaultCall__Inputs {
  _call: C3_redeemPoolDefaultCall;

  constructor(call: C3_redeemPoolDefaultCall) {
    this._call = call;
  }

  get poolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fromMode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class C3_redeemPoolDefaultCall__Outputs {
  _call: C3_redeemPoolDefaultCall;

  constructor(call: C3_redeemPoolDefaultCall) {
    this._call = call;
  }

  get projectTokens(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class C3_redeemPoolSpecificCall extends ethereum.Call {
  get inputs(): C3_redeemPoolSpecificCall__Inputs {
    return new C3_redeemPoolSpecificCall__Inputs(this);
  }

  get outputs(): C3_redeemPoolSpecificCall__Outputs {
    return new C3_redeemPoolSpecificCall__Outputs(this);
  }
}

export class C3_redeemPoolSpecificCall__Inputs {
  _call: C3_redeemPoolSpecificCall;

  constructor(call: C3_redeemPoolSpecificCall) {
    this._call = call;
  }

  get poolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get fromMode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class C3_redeemPoolSpecificCall__Outputs {
  _call: C3_redeemPoolSpecificCall;

  constructor(call: C3_redeemPoolSpecificCall) {
    this._call = call;
  }

  get redeemedAmounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class C3_retireExactC3TCall extends ethereum.Call {
  get inputs(): C3_retireExactC3TCall__Inputs {
    return new C3_retireExactC3TCall__Inputs(this);
  }

  get outputs(): C3_retireExactC3TCall__Outputs {
    return new C3_retireExactC3TCall__Outputs(this);
  }
}

export class C3_retireExactC3TCall__Inputs {
  _call: C3_retireExactC3TCall;

  constructor(call: C3_retireExactC3TCall) {
    this._call = call;
  }

  get carbonToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[3].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[4].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class C3_retireExactC3TCall__Outputs {
  _call: C3_retireExactC3TCall;

  constructor(call: C3_retireExactC3TCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class C3_retireExactC3TWithEntityCall extends ethereum.Call {
  get inputs(): C3_retireExactC3TWithEntityCall__Inputs {
    return new C3_retireExactC3TWithEntityCall__Inputs(this);
  }

  get outputs(): C3_retireExactC3TWithEntityCall__Outputs {
    return new C3_retireExactC3TWithEntityCall__Outputs(this);
  }
}

export class C3_retireExactC3TWithEntityCall__Inputs {
  _call: C3_retireExactC3TWithEntityCall;

  constructor(call: C3_retireExactC3TWithEntityCall) {
    this._call = call;
  }

  get carbonToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[2].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[4].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[5].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class C3_retireExactC3TWithEntityCall__Outputs {
  _call: C3_retireExactC3TWithEntityCall;

  constructor(call: C3_retireExactC3TWithEntityCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Toucan_redeemPoolDefaultCall extends ethereum.Call {
  get inputs(): Toucan_redeemPoolDefaultCall__Inputs {
    return new Toucan_redeemPoolDefaultCall__Inputs(this);
  }

  get outputs(): Toucan_redeemPoolDefaultCall__Outputs {
    return new Toucan_redeemPoolDefaultCall__Outputs(this);
  }
}

export class Toucan_redeemPoolDefaultCall__Inputs {
  _call: Toucan_redeemPoolDefaultCall;

  constructor(call: Toucan_redeemPoolDefaultCall) {
    this._call = call;
  }

  get poolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fromMode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class Toucan_redeemPoolDefaultCall__Outputs {
  _call: Toucan_redeemPoolDefaultCall;

  constructor(call: Toucan_redeemPoolDefaultCall) {
    this._call = call;
  }

  get projectTokens(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class Toucan_redeemPoolSpecificCall extends ethereum.Call {
  get inputs(): Toucan_redeemPoolSpecificCall__Inputs {
    return new Toucan_redeemPoolSpecificCall__Inputs(this);
  }

  get outputs(): Toucan_redeemPoolSpecificCall__Outputs {
    return new Toucan_redeemPoolSpecificCall__Outputs(this);
  }
}

export class Toucan_redeemPoolSpecificCall__Inputs {
  _call: Toucan_redeemPoolSpecificCall;

  constructor(call: Toucan_redeemPoolSpecificCall) {
    this._call = call;
  }

  get poolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get fromMode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class Toucan_redeemPoolSpecificCall__Outputs {
  _call: Toucan_redeemPoolSpecificCall;

  constructor(call: Toucan_redeemPoolSpecificCall) {
    this._call = call;
  }

  get redeemedAmounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class Toucan_retireExactTCO2Call extends ethereum.Call {
  get inputs(): Toucan_retireExactTCO2Call__Inputs {
    return new Toucan_retireExactTCO2Call__Inputs(this);
  }

  get outputs(): Toucan_retireExactTCO2Call__Outputs {
    return new Toucan_retireExactTCO2Call__Outputs(this);
  }
}

export class Toucan_retireExactTCO2Call__Inputs {
  _call: Toucan_retireExactTCO2Call;

  constructor(call: Toucan_retireExactTCO2Call) {
    this._call = call;
  }

  get carbonToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[3].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[4].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class Toucan_retireExactTCO2Call__Outputs {
  _call: Toucan_retireExactTCO2Call;

  constructor(call: Toucan_retireExactTCO2Call) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Toucan_retireExactTCO2WithEntityCall extends ethereum.Call {
  get inputs(): Toucan_retireExactTCO2WithEntityCall__Inputs {
    return new Toucan_retireExactTCO2WithEntityCall__Inputs(this);
  }

  get outputs(): Toucan_retireExactTCO2WithEntityCall__Outputs {
    return new Toucan_retireExactTCO2WithEntityCall__Outputs(this);
  }
}

export class Toucan_retireExactTCO2WithEntityCall__Inputs {
  _call: Toucan_retireExactTCO2WithEntityCall;

  constructor(call: Toucan_retireExactTCO2WithEntityCall) {
    this._call = call;
  }

  get carbonToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[2].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[4].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[5].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class Toucan_retireExactTCO2WithEntityCall__Outputs {
  _call: Toucan_retireExactTCO2WithEntityCall;

  constructor(call: Toucan_retireExactTCO2WithEntityCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DiamondCutCall extends ethereum.Call {
  get inputs(): DiamondCutCall__Inputs {
    return new DiamondCutCall__Inputs(this);
  }

  get outputs(): DiamondCutCall__Outputs {
    return new DiamondCutCall__Outputs(this);
  }
}

export class DiamondCutCall__Inputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }

  get _diamondCut(): Array<DiamondCutCall_diamondCutStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DiamondCutCall_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DiamondCutCall__Outputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }
}

export class DiamondCutCall_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class RetireExactCarbonDefaultCall extends ethereum.Call {
  get inputs(): RetireExactCarbonDefaultCall__Inputs {
    return new RetireExactCarbonDefaultCall__Inputs(this);
  }

  get outputs(): RetireExactCarbonDefaultCall__Outputs {
    return new RetireExactCarbonDefaultCall__Outputs(this);
  }
}

export class RetireExactCarbonDefaultCall__Inputs {
  _call: RetireExactCarbonDefaultCall;

  constructor(call: RetireExactCarbonDefaultCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get retireAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[4].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[6].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[7].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[8].value.toI32();
  }
}

export class RetireExactCarbonDefaultCall__Outputs {
  _call: RetireExactCarbonDefaultCall;

  constructor(call: RetireExactCarbonDefaultCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RetireExactCarbonSpecificCall extends ethereum.Call {
  get inputs(): RetireExactCarbonSpecificCall__Inputs {
    return new RetireExactCarbonSpecificCall__Inputs(this);
  }

  get outputs(): RetireExactCarbonSpecificCall__Outputs {
    return new RetireExactCarbonSpecificCall__Outputs(this);
  }
}

export class RetireExactCarbonSpecificCall__Inputs {
  _call: RetireExactCarbonSpecificCall;

  constructor(call: RetireExactCarbonSpecificCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get projectToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get retireAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[5].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[7].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[8].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[9].value.toI32();
  }
}

export class RetireExactCarbonSpecificCall__Outputs {
  _call: RetireExactCarbonSpecificCall;

  constructor(call: RetireExactCarbonSpecificCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RetireExactSourceDefaultCall extends ethereum.Call {
  get inputs(): RetireExactSourceDefaultCall__Inputs {
    return new RetireExactSourceDefaultCall__Inputs(this);
  }

  get outputs(): RetireExactSourceDefaultCall__Outputs {
    return new RetireExactSourceDefaultCall__Outputs(this);
  }
}

export class RetireExactSourceDefaultCall__Inputs {
  _call: RetireExactSourceDefaultCall;

  constructor(call: RetireExactSourceDefaultCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[3].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[5].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[6].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class RetireExactSourceDefaultCall__Outputs {
  _call: RetireExactSourceDefaultCall;

  constructor(call: RetireExactSourceDefaultCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RetireExactSourceSpecificCall extends ethereum.Call {
  get inputs(): RetireExactSourceSpecificCall__Inputs {
    return new RetireExactSourceSpecificCall__Inputs(this);
  }

  get outputs(): RetireExactSourceSpecificCall__Outputs {
    return new RetireExactSourceSpecificCall__Outputs(this);
  }
}

export class RetireExactSourceSpecificCall__Inputs {
  _call: RetireExactSourceSpecificCall;

  constructor(call: RetireExactSourceSpecificCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get projectToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[4].value.toString();
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[6].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[7].value.toString();
  }

  get fromMode(): i32 {
    return this._call.inputValues[8].value.toI32();
  }
}

export class RetireExactSourceSpecificCall__Outputs {
  _call: RetireExactSourceSpecificCall;

  constructor(call: RetireExactSourceSpecificCall) {
    this._call = call;
  }

  get retirementIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferTokenCall extends ethereum.Call {
  get inputs(): TransferTokenCall__Inputs {
    return new TransferTokenCall__Inputs(this);
  }

  get outputs(): TransferTokenCall__Outputs {
    return new TransferTokenCall__Outputs(this);
  }
}

export class TransferTokenCall__Inputs {
  _call: TransferTokenCall;

  constructor(call: TransferTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get fromMode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class TransferTokenCall__Outputs {
  _call: TransferTokenCall;

  constructor(call: TransferTokenCall) {
    this._call = call;
  }
}

export class UnwrapMaticCall extends ethereum.Call {
  get inputs(): UnwrapMaticCall__Inputs {
    return new UnwrapMaticCall__Inputs(this);
  }

  get outputs(): UnwrapMaticCall__Outputs {
    return new UnwrapMaticCall__Outputs(this);
  }
}

export class UnwrapMaticCall__Inputs {
  _call: UnwrapMaticCall;

  constructor(call: UnwrapMaticCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UnwrapMaticCall__Outputs {
  _call: UnwrapMaticCall;

  constructor(call: UnwrapMaticCall) {
    this._call = call;
  }
}

export class WrapMaticCall extends ethereum.Call {
  get inputs(): WrapMaticCall__Inputs {
    return new WrapMaticCall__Inputs(this);
  }

  get outputs(): WrapMaticCall__Outputs {
    return new WrapMaticCall__Outputs(this);
  }
}

export class WrapMaticCall__Inputs {
  _call: WrapMaticCall;

  constructor(call: WrapMaticCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class WrapMaticCall__Outputs {
  _call: WrapMaticCall;

  constructor(call: WrapMaticCall) {
    this._call = call;
  }
}
