// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURISet extends ethereum.Event {
  get params(): BaseURISet__Params {
    return new BaseURISet__Params(this);
  }
}

export class BaseURISet__Params {
  _event: BaseURISet;

  constructor(event: BaseURISet) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CertificateMinted extends ethereum.Event {
  get params(): CertificateMinted__Params {
    return new CertificateMinted__Params(this);
  }
}

export class CertificateMinted__Params {
  _event: CertificateMinted;

  constructor(event: CertificateMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CertificateUpdated extends ethereum.Event {
  get params(): CertificateUpdated__Params {
    return new CertificateUpdated__Params(this);
  }
}

export class CertificateUpdated__Params {
  _event: CertificateUpdated;

  constructor(event: CertificateUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinValidAmountSet extends ethereum.Event {
  get params(): MinValidAmountSet__Params {
    return new MinValidAmountSet__Params(this);
  }
}

export class MinValidAmountSet__Params {
  _event: MinValidAmountSet;

  constructor(event: MinValidAmountSet) {
    this._event = event;
  }

  get previousAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ToucanRegistrySet extends ethereum.Event {
  get params(): ToucanRegistrySet__Params {
    return new ToucanRegistrySet__Params(this);
  }
}

export class ToucanRegistrySet__Params {
  _event: ToucanRegistrySet;

  constructor(event: ToucanRegistrySet) {
    this._event = event;
  }

  get ContractRegistry(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ToucanCertificate__certificatesResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: string;
  value4: string;
  value5: string;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: string,
    value4: string,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getCreatedAt(): BigInt {
    return this.value0;
  }

  getRetiringEntity(): Address {
    return this.value1;
  }

  getBeneficiary(): Address {
    return this.value2;
  }

  getRetiringEntityString(): string {
    return this.value3;
  }

  getBeneficiaryString(): string {
    return this.value4;
  }

  getRetirementMessage(): string {
    return this.value5;
  }
}

export class ToucanCertificate__getDataResultValue0Struct extends ethereum.Tuple {
  get retirementEventIds(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get createdAt(): BigInt {
    return this[1].toBigInt();
  }

  get retiringEntity(): Address {
    return this[2].toAddress();
  }

  get beneficiary(): Address {
    return this[3].toAddress();
  }

  get retiringEntityString(): string {
    return this[4].toString();
  }

  get beneficiaryString(): string {
    return this[5].toString();
  }

  get retirementMessage(): string {
    return this[6].toString();
  }
}

export class ToucanCertificate__retirementsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getCreatedAt(): BigInt {
    return this.value0;
  }

  getRetiringEntity(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getProjectVintageTokenId(): BigInt {
    return this.value3;
  }
}

export class ToucanCertificate extends ethereum.SmartContract {
  static bind(address: Address): ToucanCertificate {
    return new ToucanCertificate("ToucanCertificate", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  certificates(param0: BigInt): ToucanCertificate__certificatesResult {
    let result = super.call(
      "certificates",
      "certificates(uint256):(uint256,address,address,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ToucanCertificate__certificatesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toString(),
      result[4].toString(),
      result[5].toString()
    );
  }

  try_certificates(
    param0: BigInt
  ): ethereum.CallResult<ToucanCertificate__certificatesResult> {
    let result = super.tryCall(
      "certificates",
      "certificates(uint256):(uint256,address,address,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ToucanCertificate__certificatesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toString(),
        value[4].toString(),
        value[5].toString()
      )
    );
  }

  claimedEvents(param0: BigInt): boolean {
    let result = super.call("claimedEvents", "claimedEvents(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_claimedEvents(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimedEvents",
      "claimedEvents(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contractRegistry(): Address {
    let result = super.call(
      "contractRegistry",
      "contractRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_contractRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contractRegistry",
      "contractRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getData(tokenId: BigInt): ToucanCertificate__getDataResultValue0Struct {
    let result = super.call(
      "getData",
      "getData(uint256):((uint256[],uint256,address,address,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<ToucanCertificate__getDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getData(
    tokenId: BigInt
  ): ethereum.CallResult<ToucanCertificate__getDataResultValue0Struct> {
    let result = super.tryCall(
      "getData",
      "getData(uint256):((uint256[],uint256,address,address,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ToucanCertificate__getDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getRetiredAmount(tokenId: BigInt): BigInt {
    let result = super.call(
      "getRetiredAmount",
      "getRetiredAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getRetiredAmount(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRetiredAmount",
      "getRetiredAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRetiredAmountInKilos(tokenId: BigInt): BigInt {
    let result = super.call(
      "getRetiredAmountInKilos",
      "getRetiredAmountInKilos(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getRetiredAmountInKilos(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRetiredAmountInKilos",
      "getRetiredAmountInKilos(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRetiredAmountInTonnes(tokenId: BigInt): BigInt {
    let result = super.call(
      "getRetiredAmountInTonnes",
      "getRetiredAmountInTonnes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getRetiredAmountInTonnes(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRetiredAmountInTonnes",
      "getRetiredAmountInTonnes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserEvents(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserEvents",
      "getUserEvents(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserEvents(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserEvents",
      "getUserEvents(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kiloDenomination(): BigInt {
    let result = super.call(
      "kiloDenomination",
      "kiloDenomination():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_kiloDenomination(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kiloDenomination",
      "kiloDenomination():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minValidRetirementAmount(): BigInt {
    let result = super.call(
      "minValidRetirementAmount",
      "minValidRetirementAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minValidRetirementAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minValidRetirementAmount",
      "minValidRetirementAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerEvent(
    retiringEntity: Address,
    projectVintageTokenId: BigInt,
    amount: BigInt,
    isLegacy: boolean
  ): BigInt {
    let result = super.call(
      "registerEvent",
      "registerEvent(address,uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(retiringEntity),
        ethereum.Value.fromUnsignedBigInt(projectVintageTokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(isLegacy)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerEvent(
    retiringEntity: Address,
    projectVintageTokenId: BigInt,
    amount: BigInt,
    isLegacy: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerEvent",
      "registerEvent(address,uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(retiringEntity),
        ethereum.Value.fromUnsignedBigInt(projectVintageTokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(isLegacy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retireEventCounter(): BigInt {
    let result = super.call(
      "retireEventCounter",
      "retireEventCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_retireEventCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retireEventCounter",
      "retireEventCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retirements(param0: BigInt): ToucanCertificate__retirementsResult {
    let result = super.call(
      "retirements",
      "retirements(uint256):(uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ToucanCertificate__retirementsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_retirements(
    param0: BigInt
  ): ethereum.CallResult<ToucanCertificate__retirementsResult> {
    let result = super.tryCall(
      "retirements",
      "retirements(uint256):(uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ToucanCertificate__retirementsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tonneDenomination(): BigInt {
    let result = super.call(
      "tonneDenomination",
      "tonneDenomination():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tonneDenomination(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tonneDenomination",
      "tonneDenomination():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AttachRetirementEventsCall extends ethereum.Call {
  get inputs(): AttachRetirementEventsCall__Inputs {
    return new AttachRetirementEventsCall__Inputs(this);
  }

  get outputs(): AttachRetirementEventsCall__Outputs {
    return new AttachRetirementEventsCall__Outputs(this);
  }
}

export class AttachRetirementEventsCall__Inputs {
  _call: AttachRetirementEventsCall;

  constructor(call: AttachRetirementEventsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get retirementEventIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AttachRetirementEventsCall__Outputs {
  _call: AttachRetirementEventsCall;

  constructor(call: AttachRetirementEventsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _contractRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _baseURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCertificateCall extends ethereum.Call {
  get inputs(): MintCertificateCall__Inputs {
    return new MintCertificateCall__Inputs(this);
  }

  get outputs(): MintCertificateCall__Outputs {
    return new MintCertificateCall__Outputs(this);
  }
}

export class MintCertificateCall__Inputs {
  _call: MintCertificateCall;

  constructor(call: MintCertificateCall) {
    this._call = call;
  }

  get retiringEntity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[1].value.toString();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[3].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[4].value.toString();
  }

  get retirementEventIds(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class MintCertificateCall__Outputs {
  _call: MintCertificateCall;

  constructor(call: MintCertificateCall) {
    this._call = call;
  }
}

export class RegisterEventCall extends ethereum.Call {
  get inputs(): RegisterEventCall__Inputs {
    return new RegisterEventCall__Inputs(this);
  }

  get outputs(): RegisterEventCall__Outputs {
    return new RegisterEventCall__Outputs(this);
  }
}

export class RegisterEventCall__Inputs {
  _call: RegisterEventCall;

  constructor(call: RegisterEventCall) {
    this._call = call;
  }

  get retiringEntity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectVintageTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isLegacy(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class RegisterEventCall__Outputs {
  _call: RegisterEventCall;

  constructor(call: RegisterEventCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetMinValidRetirementAmountCall extends ethereum.Call {
  get inputs(): SetMinValidRetirementAmountCall__Inputs {
    return new SetMinValidRetirementAmountCall__Inputs(this);
  }

  get outputs(): SetMinValidRetirementAmountCall__Outputs {
    return new SetMinValidRetirementAmountCall__Outputs(this);
  }
}

export class SetMinValidRetirementAmountCall__Inputs {
  _call: SetMinValidRetirementAmountCall;

  constructor(call: SetMinValidRetirementAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinValidRetirementAmountCall__Outputs {
  _call: SetMinValidRetirementAmountCall;

  constructor(call: SetMinValidRetirementAmountCall) {
    this._call = call;
  }
}

export class SetToucanContractRegistryCall extends ethereum.Call {
  get inputs(): SetToucanContractRegistryCall__Inputs {
    return new SetToucanContractRegistryCall__Inputs(this);
  }

  get outputs(): SetToucanContractRegistryCall__Outputs {
    return new SetToucanContractRegistryCall__Outputs(this);
  }
}

export class SetToucanContractRegistryCall__Inputs {
  _call: SetToucanContractRegistryCall;

  constructor(call: SetToucanContractRegistryCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetToucanContractRegistryCall__Outputs {
  _call: SetToucanContractRegistryCall;

  constructor(call: SetToucanContractRegistryCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCertificateCall extends ethereum.Call {
  get inputs(): UpdateCertificateCall__Inputs {
    return new UpdateCertificateCall__Inputs(this);
  }

  get outputs(): UpdateCertificateCall__Outputs {
    return new UpdateCertificateCall__Outputs(this);
  }
}

export class UpdateCertificateCall__Inputs {
  _call: UpdateCertificateCall;

  constructor(call: UpdateCertificateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get retiringEntityString(): string {
    return this._call.inputValues[1].value.toString();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get beneficiaryString(): string {
    return this._call.inputValues[3].value.toString();
  }

  get retirementMessage(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class UpdateCertificateCall__Outputs {
  _call: UpdateCertificateCall;

  constructor(call: UpdateCertificateCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
