// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CarbonOffset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("tokenAddress", Value.fromString(""));
    this.set("bridge", Value.fromString(""));
    this.set("registry", Value.fromString(""));
    this.set("totalBridged", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalRetired", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currentSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("vintage", Value.fromString(""));
    this.set("projectID", Value.fromString(""));
    this.set("standard", Value.fromString(""));
    this.set("methodology", Value.fromString(""));
    this.set("country", Value.fromString(""));
    this.set("region", Value.fromString(""));
    this.set("storageMethod", Value.fromString(""));
    this.set("method", Value.fromString(""));
    this.set("emissionType", Value.fromString(""));
    this.set("category", Value.fromString(""));
    this.set("coBenefits", Value.fromString(""));
    this.set("correspAdjustment", Value.fromString(""));
    this.set("additionalCertification", Value.fromString(""));
    this.set("klimaRanking", Value.fromBigInt(BigInt.zero()));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CarbonOffset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CarbonOffset entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CarbonOffset", id.toString(), this);
    }
  }

  static load(id: string): CarbonOffset | null {
    return changetype<CarbonOffset | null>(store.get("CarbonOffset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    return value!.toString();
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get bridge(): string {
    let value = this.get("bridge");
    return value!.toString();
  }

  set bridge(value: string) {
    this.set("bridge", Value.fromString(value));
  }

  get registry(): string {
    let value = this.get("registry");
    return value!.toString();
  }

  set registry(value: string) {
    this.set("registry", Value.fromString(value));
  }

  get totalBridged(): BigDecimal {
    let value = this.get("totalBridged");
    return value!.toBigDecimal();
  }

  set totalBridged(value: BigDecimal) {
    this.set("totalBridged", Value.fromBigDecimal(value));
  }

  get totalRetired(): BigDecimal {
    let value = this.get("totalRetired");
    return value!.toBigDecimal();
  }

  set totalRetired(value: BigDecimal) {
    this.set("totalRetired", Value.fromBigDecimal(value));
  }

  get currentSupply(): BigDecimal {
    let value = this.get("currentSupply");
    return value!.toBigDecimal();
  }

  set currentSupply(value: BigDecimal) {
    this.set("currentSupply", Value.fromBigDecimal(value));
  }

  get vintage(): string {
    let value = this.get("vintage");
    return value!.toString();
  }

  set vintage(value: string) {
    this.set("vintage", Value.fromString(value));
  }

  get projectID(): string {
    let value = this.get("projectID");
    return value!.toString();
  }

  set projectID(value: string) {
    this.set("projectID", Value.fromString(value));
  }

  get standard(): string {
    let value = this.get("standard");
    return value!.toString();
  }

  set standard(value: string) {
    this.set("standard", Value.fromString(value));
  }

  get methodology(): string {
    let value = this.get("methodology");
    return value!.toString();
  }

  set methodology(value: string) {
    this.set("methodology", Value.fromString(value));
  }

  get country(): string {
    let value = this.get("country");
    return value!.toString();
  }

  set country(value: string) {
    this.set("country", Value.fromString(value));
  }

  get region(): string {
    let value = this.get("region");
    return value!.toString();
  }

  set region(value: string) {
    this.set("region", Value.fromString(value));
  }

  get storageMethod(): string {
    let value = this.get("storageMethod");
    return value!.toString();
  }

  set storageMethod(value: string) {
    this.set("storageMethod", Value.fromString(value));
  }

  get method(): string {
    let value = this.get("method");
    return value!.toString();
  }

  set method(value: string) {
    this.set("method", Value.fromString(value));
  }

  get emissionType(): string {
    let value = this.get("emissionType");
    return value!.toString();
  }

  set emissionType(value: string) {
    this.set("emissionType", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get isCorsiaCompliant(): boolean {
    let value = this.get("isCorsiaCompliant");
    return value!.toBoolean();
  }

  set isCorsiaCompliant(value: boolean) {
    this.set("isCorsiaCompliant", Value.fromBoolean(value));
  }

  get coBenefits(): string {
    let value = this.get("coBenefits");
    return value!.toString();
  }

  set coBenefits(value: string) {
    this.set("coBenefits", Value.fromString(value));
  }

  get correspAdjustment(): string {
    let value = this.get("correspAdjustment");
    return value!.toString();
  }

  set correspAdjustment(value: string) {
    this.set("correspAdjustment", Value.fromString(value));
  }

  get additionalCertification(): string {
    let value = this.get("additionalCertification");
    return value!.toString();
  }

  set additionalCertification(value: string) {
    this.set("additionalCertification", Value.fromString(value));
  }

  get klimaRanking(): BigInt {
    let value = this.get("klimaRanking");
    return value!.toBigInt();
  }

  set klimaRanking(value: BigInt) {
    this.set("klimaRanking", Value.fromBigInt(value));
  }

  get bridges(): Array<string> | null {
    let value = this.get("bridges");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bridges(value: Array<string> | null) {
    if (!value) {
      this.unset("bridges");
    } else {
      this.set("bridges", Value.fromStringArray(<Array<string>>value));
    }
  }

  get retirements(): Array<string> | null {
    let value = this.get("retirements");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set retirements(value: Array<string> | null) {
    if (!value) {
      this.unset("retirements");
    } else {
      this.set("retirements", Value.fromStringArray(<Array<string>>value));
    }
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }
}

export class Bridge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("offset", Value.fromString(""));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("bridger", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bridge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bridge entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bridge", id.toString(), this);
    }
  }

  static load(id: string): Bridge | null {
    return changetype<Bridge | null>(store.get("Bridge", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get offset(): string {
    let value = this.get("offset");
    return value!.toString();
  }

  set offset(value: string) {
    this.set("offset", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get bridger(): string {
    let value = this.get("bridger");
    return value!.toString();
  }

  set bridger(value: string) {
    this.set("bridger", Value.fromString(value));
  }
}

export class Retire extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("offset", Value.fromString(""));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("beneficiary", Value.fromString(""));
    this.set("retiree", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Retire entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Retire entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Retire", id.toString(), this);
    }
  }

  static load(id: string): Retire | null {
    return changetype<Retire | null>(store.get("Retire", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get offset(): string {
    let value = this.get("offset");
    return value!.toString();
  }

  set offset(value: string) {
    this.set("offset", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    return value!.toString();
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get retiree(): string {
    let value = this.get("retiree");
    return value!.toString();
  }

  set retiree(value: string) {
    this.set("retiree", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockHash", Value.fromBytes(Bytes.empty()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockHash(): Bytes {
    let value = this.get("blockHash");
    return value!.toBytes();
  }

  set blockHash(value: Bytes) {
    this.set("blockHash", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }
}
